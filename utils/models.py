from dataclasses import dataclass
from datetime import datetime
from typing import Optional, List

@dataclass
class NewsItem:
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram).
    """
    title: str  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
    url: str  # –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
    source: str  # –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–∏ (mos.ru, dzen, etc.)
    published_date: Optional[datetime] = None  # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞)
    snippet: Optional[str] = None  # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ/—Å–Ω–∏–ø–ø–µ—Ç
    categories: List[str] = None  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ç–µ–≥–∏ –Ω–æ–≤–æ—Å—Ç–∏
    
    def __post_init__(self):
        """–ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        if self.categories is None:
            self.categories = []
    
    def __eq__(self, other):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –¥–≤—É—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
        –î–≤–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ä–∞–≤–Ω—ã–º–∏, –µ—Å–ª–∏ —É –Ω–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π URL.
        """
        if not isinstance(other, NewsItem):
            return False
        return self.url == other.url
    
    def __hash__(self):
        """
        –•–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è URL –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.
        """
        return hash(self.url)
    
    def to_telegram_message(self):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = ""
        if self.source == "–î–∑–µ–Ω":
            message += "<b>–¢–û–ü –î–ó–ï–ù–ê:</b>\n"
        message += f"üì∞ <b>{self.title}</b>\n"
        
        if self.snippet:
            message += f"{self.snippet}\n\n"
            
        message += f"üìé <a href=\"{self.url}\">–ß–∏—Ç–∞—Ç—å –Ω–∞ {self.source}</a>"
        
        return message 

@dataclass
class MosruHistoryItem:
    url: str
    title: str
    snippet: str
    added_at: str  # ISO8601
    in_dzen: bool = False

    def to_telegram_message(self):
        message = f"üì∞ <b>{self.title}</b>\n"
        if self.snippet:
            message += f"{self.snippet}\n\n"
        message += f"üìé <a href=\"{self.url}\">–ß–∏—Ç–∞—Ç—å –Ω–∞ mos.ru</a>"
        return message

@dataclass
class DzenHistoryItem:
    url: str
    title: str
    added_at: str  # ISO8601
    mosru_source_url: Optional[str] = None
    mosru_title: Optional[str] = None
    mosru_snippet: Optional[str] = None
    match_type: Optional[str] = None  # "sbert" –∏–ª–∏ "keywords"
    similarity_score: Optional[float] = None  # –ß–∏—Å–ª–æ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ö–æ–∂–µ—Å—Ç–∏ (0.0-1.0)
    common_words: Optional[int] = None  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —Å–ª–æ–≤
    matched_keywords: Optional[List[str]] = None  # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

    def __post_init__(self):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è ListField
        if self.matched_keywords is None:
            self.matched_keywords = []

    def to_telegram_message(self):
        message = "<b>–¢–û–ü –î–ó–ï–ù–ê:</b>\n"
        message += f"üì∞ <b>{self.title}</b>\n"
        if self.mosru_source_url:
            message += f"\n<b>–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫:</b> <a href=\"{self.mosru_source_url}\">{self.mosru_title or '–ß–∏—Ç–∞—Ç—å –Ω–∞ mos.ru'}</a>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–æ–∂–µ—Å—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if self.similarity_score:
                message += f"<i>–°—Ö–æ–∂–µ—Å—Ç—å: {self.similarity_score:.2f}</i>\n"
        elif self.match_type == "keywords" and self.matched_keywords:
            message += f"\n<i>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(self.matched_keywords[:3])}</i>\n"
            
        message += f"\nüìé <a href=\"{self.url}\">–ß–∏—Ç–∞—Ç—å –Ω–∞ –î–∑–µ–Ω</a>"
        return message 